// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecondExam.Data.Context;

#nullable disable

namespace SecondExam.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20220808112822_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.Credentials", b =>
                {
                    b.Property<int>("CredentialsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialsID"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialsID");

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("CredentialsID")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CredentialsID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("AuthorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaterialTypeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MaterialTypeTypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("SecondExam.Data.Model.MaterialType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("TypeDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("DigitReview")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextReview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.User", b =>
                {
                    b.HasOne("SecondExam.Data.Model.Authentication.Credentials", "Credentials")
                        .WithOne("User")
                        .HasForeignKey("SecondExam.Data.Model.Authentication.User", "CredentialsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Material", b =>
                {
                    b.HasOne("SecondExam.Data.Model.Author", "MatherialAuthor")
                        .WithMany("AuthorPublications")
                        .HasForeignKey("AuthorId");

                    b.HasOne("SecondExam.Data.Model.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeTypeId");

                    b.Navigation("MaterialType");

                    b.Navigation("MatherialAuthor");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Review", b =>
                {
                    b.HasOne("SecondExam.Data.Model.Material", null)
                        .WithMany("MaterialReviews")
                        .HasForeignKey("MaterialId");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.Credentials", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("SecondExam.Data.Model.Author", b =>
                {
                    b.Navigation("AuthorPublications");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Material", b =>
                {
                    b.Navigation("MaterialReviews");
                });
#pragma warning restore 612, 618
        }
    }
}

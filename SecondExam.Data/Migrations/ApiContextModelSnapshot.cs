// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecondExam.Data.Context;

#nullable disable

namespace SecondExam.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.Credentials", b =>
                {
                    b.Property<int>("CredentialsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialsID"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialsID");

                    b.ToTable("UserCredentials");

                    b.HasData(
                        new
                        {
                            CredentialsID = 1,
                            Login = "admin",
                            Password = "admin"
                        },
                        new
                        {
                            CredentialsID = 2,
                            Login = "user",
                            Password = "user"
                        });
                });

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("CredentialsID")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CredentialsID")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CredentialsID = 1,
                            Role = 0
                        },
                        new
                        {
                            UserId = 2,
                            CredentialsID = 2,
                            Role = 1
                        });
                });

            modelBuilder.Entity("SecondExam.Data.Model.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("AuthorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorDescription = "Polish author",
                            AuthorName = "Jan Kowalski"
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorDescription = "Famous russian scientist",
                            AuthorName = "Wolodia Puszkin"
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorDescription = "Inventor of tent",
                            AuthorName = "Nacomi Tachata"
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorDescription = "Has so many publications",
                            AuthorName = "Daniel Nowak"
                        });
                });

            modelBuilder.Entity("SecondExam.Data.Model.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaterialTypeId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2000, 9, 18, 9, 23, 6, 389, DateTimeKind.Unspecified).AddTicks(391),
                            MaterialDescription = "How to avoid nulls in C#",
                            MaterialLocation = "Internet",
                            MaterialTitle = "How to avoid Nulls",
                            MaterialTypeId = 1
                        },
                        new
                        {
                            MaterialId = 2,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2005, 7, 8, 1, 27, 3, 443, DateTimeKind.Unspecified).AddTicks(8322),
                            MaterialDescription = "Basic of C#",
                            MaterialLocation = "Library",
                            MaterialTitle = "C# for dummies",
                            MaterialTypeId = 3
                        },
                        new
                        {
                            MaterialId = 3,
                            AuthorId = 3,
                            CreatedDate = new DateTime(1996, 10, 28, 19, 15, 5, 410, DateTimeKind.Unspecified).AddTicks(8291),
                            MaterialDescription = "Collection of best practices",
                            MaterialLocation = "Internet",
                            MaterialTitle = "Best practices in code",
                            MaterialTypeId = 2
                        },
                        new
                        {
                            MaterialId = 4,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2009, 7, 18, 3, 26, 30, 738, DateTimeKind.Unspecified).AddTicks(8210),
                            MaterialDescription = "How to seed database",
                            MaterialLocation = "Internet",
                            MaterialTitle = "Seeding Database",
                            MaterialTypeId = 4
                        });
                });

            modelBuilder.Entity("SecondExam.Data.Model.MaterialType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("TypeDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeDefinition = "Video tutorial is a video material that focuses mostly on guiding step-by-step in dedicated topic",
                            TypeName = "Video tutorial"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeDefinition = "Article is an article on web page",
                            TypeName = "Article"
                        },
                        new
                        {
                            TypeId = 3,
                            TypeDefinition = "What book is, everybody knows",
                            TypeName = "Book"
                        },
                        new
                        {
                            TypeId = 4,
                            TypeDefinition = "Sample code",
                            TypeName = "Code snippet"
                        });
                });

            modelBuilder.Entity("SecondExam.Data.Model.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("DigitReview")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextReview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            DigitReview = 9,
                            MaterialId = 1,
                            ReviewReference = "https://localhost:5001/1",
                            TextReview = "Good material"
                        },
                        new
                        {
                            ReviewId = 2,
                            DigitReview = 10,
                            MaterialId = 1,
                            ReviewReference = "https://localhost:5001/1",
                            TextReview = "Great material"
                        },
                        new
                        {
                            ReviewId = 3,
                            DigitReview = 2,
                            MaterialId = 1,
                            ReviewReference = "https://localhost:5001/1",
                            TextReview = "poor material"
                        },
                        new
                        {
                            ReviewId = 4,
                            DigitReview = 9,
                            MaterialId = 2,
                            ReviewReference = "https://localhost:5001/2",
                            TextReview = "Good material"
                        },
                        new
                        {
                            ReviewId = 5,
                            DigitReview = 7,
                            MaterialId = 3,
                            ReviewReference = "https://localhost:5001/3",
                            TextReview = "Good material"
                        });
                });

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.User", b =>
                {
                    b.HasOne("SecondExam.Data.Model.Authentication.Credentials", "Credentials")
                        .WithOne("User")
                        .HasForeignKey("SecondExam.Data.Model.Authentication.User", "CredentialsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Material", b =>
                {
                    b.HasOne("SecondExam.Data.Model.Author", "MatherialAuthor")
                        .WithMany("AuthorPublications")
                        .HasForeignKey("AuthorId");

                    b.HasOne("SecondExam.Data.Model.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId");

                    b.Navigation("MaterialType");

                    b.Navigation("MatherialAuthor");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Review", b =>
                {
                    b.HasOne("SecondExam.Data.Model.Material", null)
                        .WithMany("MaterialReviews")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SecondExam.Data.Model.Authentication.Credentials", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("SecondExam.Data.Model.Author", b =>
                {
                    b.Navigation("AuthorPublications");
                });

            modelBuilder.Entity("SecondExam.Data.Model.Material", b =>
                {
                    b.Navigation("MaterialReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
